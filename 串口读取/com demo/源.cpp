#define _CRT_SECURE_NO_WARNINGS
#define swapl(x) ((((x) & 0x000000ff) << 24) | \
                  (((x) & 0x0000ff00) <<  8) | \
                  (((x) & 0x00ff0000) >>  8) | \
                  (((x) & 0xff000000) >> 24))
//双字节顺序交换
#define swaps(x) ((((x) & 0x00ff) << 8) | \
                     (((x) & 0xff00) >> 8))
#include <iostream>
#include <string>
#include <vector>
#include "SerialPort.h"
#include "Tools.h"
using namespace std;
#pragma push
#pragma pack(1)
struct ReadParaCmd
{
	uint8_t head[3] = { 0xaa ,0x55, 0x7f };
	uint8_t seviceID[4] = { 0x22 , 0x00 , 0x00 , 0xcb };
	uint8_t cmd = 0x91;
	uint8_t type = 0x01;
	WORD crc;
	uint8_t tail[3] = { 0x7f ,0xaa, 0xed };
};
struct EigenData
{
	uint8_t head[3] = { 0xaa ,0x55, 0x7f };
	uint8_t seviceID[4] = { 0x22 , 0x00 , 0x00 , 0xcb };
	uint8_t cmd = 0x5a;
	uint8_t type = 0x03;
	uint16_t acceX;
	uint16_t acceY;
	uint16_t acceZ;
	uint16_t speedEffectX;
	uint16_t speedEffectY;
	uint16_t speedEffectZ;
	uint16_t driftX;
	uint16_t driftY;
	uint16_t driftZ;
	uint16_t temper;
	uint16_t volt;
	int sleepTime;
	WORD crc;
	uint8_t tail[3] = { 0x7f ,0xaa, 0xed };
};
struct EigenACK
{
	uint8_t head[3] = { 0xaa ,0x55, 0x7f };
	uint8_t seviceID[4] = { 0x22 , 0x00 , 0x00 , 0xcb };
	uint8_t cmd = 0x5a;
	uint8_t type = 0x30;
	WORD crc;
	uint8_t tail[3] = { 0x7f ,0xaa, 0xed };
};
struct WaveReadCmd
{
	uint8_t head[3] = { 0xaa ,0x55, 0x7f };
	uint8_t seviceID[4] = { 0x22 , 0x00 , 0x00 , 0xcb };
	uint8_t cmd = 0x01;
	uint8_t type = 0x01;
	uint16_t packNum;
	uint16_t byteLen;
	WORD crc;
	uint8_t tail[3] = { 0x7f ,0xaa, 0xed };
};
struct WaveInfo
{
	uint8_t head[3] = { 0xaa ,0x55, 0x7f };
	uint8_t seviceID[4] = { 0x22 , 0x00 , 0x00 , 0xcb };
	uint8_t cmd = 0x01;
	uint8_t type = 0x01;
	uint16_t packNum;
	uint8_t sf;
	uint8_t waveLen;
	WORD crc;
	uint8_t tail[3] = { 0x7f ,0xaa, 0xed };
};
struct WaveInfoAck
{
	uint8_t head[3] = { 0xaa ,0x55, 0x7f };
	uint8_t seviceID[4] = { 0x22 , 0x00 , 0x00 , 0xcb };
	uint8_t cmd = 0x01;
	uint8_t type = 0x20;
	uint16_t packNum = 0xc700;
	uint8_t sf = 1;
	uint8_t waveLen = 0x12;
	WORD crc;
	uint8_t tail[3] = { 0x7f ,0xaa, 0xed };
};
struct WaveData
{
	uint8_t head[3] = { 0xaa ,0x55, 0x7f };
	uint8_t seviceID[4] = { 0x22 , 0x00 , 0x00 , 0xcb };
	uint8_t cmd = 0x01;
	uint8_t type = 0x02;
	uint16_t packNum;
	uint16_t byteLen;
	int16_t data[31];
	WORD crc;
	uint8_t tail[3] = { 0x7f ,0xaa, 0xed };
};
struct WaveDataAck
{
	uint8_t head[3] = { 0xaa ,0x55, 0x7f };
	uint8_t seviceID[4] = { 0x22 , 0x00 , 0x00 , 0xcb };
	uint8_t cmd = 0x01;
	uint8_t type = 0x20;
	uint16_t packNum;
	uint16_t byteLen;
	WORD crc;
	uint8_t tail[3] = { 0x7f ,0xaa, 0xed };
};
#pragma pack()
const BYTE chCRCHTalbe[] =
{
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
	0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
	0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40
};

// CRC 低位字节值表
const BYTE chCRCLTalbe[] =
{
	0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7,
	0x05, 0xC5, 0xC4, 0x04, 0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E,
	0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09, 0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9,
	0x1B, 0xDB, 0xDA, 0x1A, 0x1E, 0xDE, 0xDF, 0x1F, 0xDD, 0x1D, 0x1C, 0xDC,
	0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
	0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32,
	0x36, 0xF6, 0xF7, 0x37, 0xF5, 0x35, 0x34, 0xF4, 0x3C, 0xFC, 0xFD, 0x3D,
	0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A, 0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38,
	0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA, 0xEE, 0x2E, 0x2F, 0xEF,
	0x2D, 0xED, 0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26,
	0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60, 0x61, 0xA1,
	0x63, 0xA3, 0xA2, 0x62, 0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64, 0xA4,
	0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F, 0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB,
	0x69, 0xA9, 0xA8, 0x68, 0x78, 0xB8, 0xB9, 0x79, 0xBB, 0x7B, 0x7A, 0xBA,
	0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5,
	0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0,
	0x50, 0x90, 0x91, 0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97,
	0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C, 0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E,
	0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98, 0x88, 0x48, 0x49, 0x89,
	0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
	0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83,
	0x41, 0x81, 0x80, 0x40
};
WORD CRC16(const BYTE* pchMsg, WORD wDataLen)
{
	// 高CRC字节初始化
	BYTE chCRCHi = 0xFF;
	// 低CRC字节初始化
	BYTE chCRCLo = 0xFF;
	// CRC循环中的索引
	WORD wIndex = 0;

	while (wDataLen--)
	{
		// 计算CRC
		wIndex = chCRCLo ^ *pchMsg++;
		chCRCLo = chCRCHi ^ chCRCHTalbe[wIndex];
		chCRCHi = chCRCLTalbe[wIndex];
	}

	return ((chCRCHi << 8) | chCRCLo);
}
int main()
{
	//SerialPortConfig conf;
	//conf.portName = "COM3";
	//auto tmpSerial = make_shared<SerialPort>(conf);
	//if (!tmpSerial->Open())
	//{
	//	cout << "open fail!" << endl;
	//	//return -1;
	//}
	//uint8_t u[6] = { 0x22 , 0x00 , 0x00 , 0xcb, 0x5a ,0x30 };
	//auto crc = CRC16(u, 6);
	////EigenACK ack;
	////ack.crc = crc;
	////auto sckStr = std::string((char *)&ack, sizeof(ack));
	////Tools::CheckOut(sckStr.c_str(), sckStr.size(), "C:\\crc.txt");
	WaveReadCmd waveRead;
	waveRead.packNum = 0;
	waveRead.byteLen = 0;

	uint8_t u2[10] = { 0x22 , 0x00 , 0x00 , 0xcb, 0x01 ,0x01, 0x00 , 0x00, 0x00 , 0x00 };
	crc = CRC16(u2, 10);
	waveRead.crc = crc;
	auto waveStr = std::string((char *)&waveRead, sizeof(waveRead));
	Tools::CheckOut(waveStr.c_str(), waveStr.size(), "C:\\crc.txt");
	WaveInfoAck waveAck;
	auto waveAckStr = std::string((char *)&waveAck, sizeof(waveAck));
	waveAckStr = std::string(waveAckStr.c_str() + 3, 10);
	char u3[10] = { 0x22 , 0x00 , 0x00 , 0xcb, 0x01 ,0x20, 0x00 , 0xc7, 0x01 , 0x12 };
	auto crc = CRC16((BYTE*)waveAckStr.c_str(), 10);
	waveAck.crc = crc;
	Tools::CheckOut(waveAckStr.c_str(), waveAckStr.size(), "C:\\crc.txt");
	tmpSerial->Read(40);
	tmpSerial->Write(waveStr);
	Sleep(1000);
	string dataStr = tmpSerial->Read(19);
	WaveInfo waveInfo;
	waveInfo = *(WaveInfo *)dataStr.c_str();
	int packNum = swaps(waveInfo.packNum);
	int waveLen = waveInfo.waveLen;
	tmpSerial->Write(waveAckStr);
	dataStr.clear();
	int index = 0;
	auto c = clock();
	for(int i = 0; i < packNum ; i++)
	{
		//EigenData eigen;
		//eigen = *(EigenData*)dataStr.c_str();

		dataStr = tmpSerial->Read(80);
		Tools::CheckOut(dataStr.c_str(), dataStr.size(), "C:\\read.txt");
		WaveData waveData;
		waveData = *(WaveData *)dataStr.c_str();
		ofstream ofs("C:\\data.txt");
		for (int i = 0; i < 31; i++)
		{
			ofs << waveData.data[i] << endl;
		}
		WaveDataAck ack;
		ack.packNum = (waveData.packNum);
		ack.byteLen = (waveData.byteLen);
		uint8_t u[10] = { 0X22 ,0X00,0X00, 0Xcb, 0X01 ,0X20 ,0X00 ,0X01 ,0X00 ,0X3e };
		memcpy_s(u + 6, 2, &waveData.packNum, 2);
		memcpy_s(u + 8, 2, &waveData.byteLen, 2);
		//memcpy_s(u, 10, &ack + 3, 10);
		auto crc = CRC16(u, 10);
		ack.crc = crc;
		string ackStr = string((char*)&ack, sizeof(ack));
		tmpSerial->Write(ackStr);

	}
	//cout << clock() - c << endl;
	//int a = 1;
	//switch (a)
	//{
	//case 0:
	//case 2:
	//	cout << "a =1 " << endl;
	//default:
	//	break;
	//}
	//int a = 0xABCDEFE7;
	//a >>= 2;
	//cout << (a & 1) << endl;
	//int a = 0;
	//char* aPtr =(char*)&a;
	//char date[3] = {0x00,0x01,0x00};
	//memcpy_s(aPtr, 3, date, 3);
	//cout << a;
	system("pause");
	return 0;
}